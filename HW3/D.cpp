/*
	Очень быстрая сортировка
Имеется рекуррентная последовательность A1, A2, ... , AN, строящаяся по следующему правилу:
A1=K
A{i+1}=(Ai * M)%(2^32 - 1)%L
Требуется найти сумму всех нечётных по порядку элементов в отсортированной по неубыванию последовательности по модулю L.
Для входных данных
5 7 13 100
последовательность будет такой:
{7, 7*13%100 = 91, 91*13%100 = 83, 83*13%100 = 79, 79*13%100 = 27}, то есть, {10, 91, 83, 79, 27}
Отсортированная последовательность {7, 27, 79, 83, 91}
Сумма элементов на нечётных местах = (10 + 79 + 91)%100 = 77
	Input format
N K M L
5000000 ≤ N ≤ 50000000, 0 ≤ K, L, M ≤ 2^32 - 1
	Output format
RESULT
	Examples
Input		Output
5 7 13 100
		77
	Notes
Для представления элементов последовательности используйте тип unsigned int. Для получения элемента последовательности — формулу a[i+1] = (unsigned int)((a[i]*(unsigned long long)M )&0xFFFFFFFFU)
*/


#include <iostream>

using namespace std;


int main () {
	
	unsigned long K, L, M, N;
	unsigned long num;
	
	cin >> N >> K >> M >> L;
	
	unsigned int a[N];
	
	a[0] = K;
	for (long i=1; i<N; i++) {
		a[i] = (unsigned int)((a[i-1]*(unsigned long long)M )&0xFFFFFFFFU);
		a[i] = a[i]%L;
	}
	
	
	for (long i=0; i<N; i++) cout << a[i] << ' ';
		
	return 0;
}
